//DNX写于2024年1月19日
public class TernaryOperatorDetail{
	public static void main(String[] args){

		//例题1：2 & 3 = 2
		//1. 2的原码 00000000 00000000 00000000 00000010
		//   2的补码 00000000 00000000 00000000 00000010 (正数三码合一)
		//2. 3的原码 00000000 00000000 00000000 00000011
		//   3的补码 00000000 00000000 00000000 00000011 (正数三码合一)
		//3. 进行按位 & 运算
		//          00000000 00000000 00000000 00000010
		//          00000000 00000000 00000000 00000011
		//          00000000 00000000 00000000 00000010   & 的结果(补码)
		//原码：     00000000 00000000 00000000 00000010 (正数三码合一) = 2
		System.out.println("2 & 3 = " + (2 & 3)); // 2

		//例题2：~(-2) = 1
		//1. (-2)的原码 10000000 00000000 00000000 00000010
		//   (-2)的反码 11111111 11111111 11111111 11111101
		//   (-2)的补码 11111111 11111111 11111111 11111110  (反码 + 1)
		//2. 进行按位 ~ 运算
		//             00000000 00000000 00000000 00000001   ~ 的结果(补码)
		//原码：        00000000 00000000 00000000 00000001 (正数三码合一) = 1
		System.out.println("~(-2) = " + ~(-2)); // 1

		//例题3：~2 = -3
		//1. 2的原码 00000000 00000000 00000000 00000010
		//   2的补码 00000000 00000000 00000000 00000010 (正数三码合一)
		//2. 进行按位 ~ 运算
		//          11111111 11111111 11111111 11111101   ~ 的结果(补码)
		//反码：     11111111 11111111 11111111 11111100 (补码 - 1)
		//原码：     10000000 00000000 00000000 00000011 = -3
		System.out.println("~2 = " + ~2); // 3

		//例题4：1 >> 2 = 0 [本质：1 / 2 / 2 = 0]
		//1. 1的原码 00000000 00000000 00000000 00000001
		//   1的补码 00000000 00000000 00000000 00000001 (正数三码合一)
		//2. 进行移位 >> (2次)运算
		//          00000000 00000000 00000000 00000000   >> 2次的结果(补码)
		//原码：     00000000 00000000 00000000 00000000 (正数三码合一) = 0
		System.out.println("1 >> 2 = " + (1 >> 2)); // 0

		//例题5：1 << 2 = 4 [本质：1 * 2 * 2 = 4]
		//1. 1的原码 00000000 00000000 00000000 00000001
		//   1的补码 00000000 00000000 00000000 00000001 (正数三码合一)
		//2. 进行移位 << (2次)运算
		//          00000000 00000000 00000000 00000100   << 2次的结果(补码)
		//原码：     00000000 00000000 00000000 00000100 (正数三码合一) = 4
		System.out.println("1 << 2 = " + (1 << 2)); // 4

		//例题6：4 << 3 = 32 [本质：4 * 2 * 2 * 2 = 32]
		System.out.println("4 << 3 = " + (4 << 3)); // 32

		//例题6：15 >> 2 = 3 [本质：15 / 2 / 2 = 3]
		System.out.println("15 >> 2 = " + (15 >> 2)); // 3
	}
}